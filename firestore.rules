
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all access unless explicitly allowed
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS collection (for admin role check and user profile management)
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      // Allow admin to manage any user document (useful for setup or recovery)
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      // Allow creation of user docs, e.g., during signup if you have a separate user profile collection
      allow create: if request.auth != null; 
    }

    // HAIRDRESSERS collection
    match /hairdressers/{hairdresserId} {
      // Hairdresser can manage their own profile
      allow read, update, delete: if request.auth != null && request.auth.uid == hairdresserId;
      // Admins can manage all hairdresser profiles
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // BOOKINGS collection
    // Rules for LISTING bookings (applies to queries on the collection, e.g., the double-booking check)
    match /bookings {
      // Allow authenticated users to perform list operations.
      // Security relies on:
      // 1. Client-side queries being correctly restricted (e.g., hairdresser queries for their own ID).
      // 2. Individual document read rules (match /bookings/{bookingId} { allow get: ... }) ensuring
      //    that even if a broader list is attempted, only permitted documents are actually read.
      // Admins are covered by their specific rule allowing broader list access.
      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow list: if request.auth != null; // Hairdressers (and any auth user) can attempt to list.
                                          // The query from the client for a hairdresser should be filtered by their UID.
    }

    // Rules for accessing INDIVIDUAL booking documents (get, create, update, delete)
    match /bookings/{bookingId} {
      // Any authenticated user can create a booking (client-side logic should validate booking details).
      allow create: if request.auth != null; 

      // Admins can read/write any specific booking document.
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Hairdressers can get/update their own specific booking documents.
      // The 'get' permission here is important: if a 'list' operation returns documents,
      // Firestore will then check if the user has 'get' permission for each of those documents.
      allow get, update: if request.auth != null && resource.data.hairdresserId == request.auth.uid;
                          // Optionally, be more granular for updates by hairdressers:
                          // && (request.method == 'get' || (request.method == 'update' && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'notes', 'updatedAt'])));
    }

    // LOCATIONS collection
    match /locations/{locationId} {
      allow read: if request.auth != null; // All authenticated users can read locations
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can write
    }

    // SERVICES collection
    match /services/{serviceId} {
       allow read: if request.auth != null; // All authenticated users can read services
       allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Only admins can write
    }
    
    // CLIENTS collection
    match /clients/{clientId} {
      // Only admins can manage client records
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}

    