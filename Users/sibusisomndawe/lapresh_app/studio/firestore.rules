
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAuth() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuth() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isHairdresser() {
      return isAuth() && exists(/databases/$(database)/documents/hairdressers/$(request.auth.uid));
    }
    
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    // COLLECTION RULES

    // Users collection (for admin roles)
    match /users/{userId} {
      allow read: if isAdmin() || isOwner(userId);
      allow write: if isAdmin();
    }

    // Hairdressers collection
    match /hairdressers/{hairdresserId} {
      // Any authenticated user can see hairdresser profiles (for selection in forms)
      allow read: if isAuth(); 
      // Only Admins can create/delete hairdresser profiles. Update is handled by a Cloud Function but we allow owners to update their own profile too.
      allow create, delete: if isAdmin();
      allow update: if isAdmin() || isOwner(hairdresserId);
    }
    
    // Locations collection
    match /locations/{locationId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    // Services collection
    match /services/{serviceId} {
      allow read: if isAuth();
      allow write: if isAdmin();
    }
    
    // Clients collection
    match /clients/{clientId} {
      // WARNING: These rules allow any authenticated user (admin or hairdresser) to read all client data.
      // This is required for the current implementation of checking for existing clients by phone number.
      // For higher security, this check should be moved to a Cloud Function.
      allow read, create, update: if isAuth();
      allow delete: if isAdmin();
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      allow create: if isAuth();
      // Admins can read any booking. Hairdressers can only read their own.
      allow read: if isAdmin() || (isHairdresser() && resource.data.hairdresserId == request.auth.uid);
      // Admins can update any booking. Hairdressers can only update their own.
      allow update: if isAdmin() || (isHairdresser() && resource.data.hairdresserId == request.auth.uid);
      allow delete: if isAdmin();
    }
    
    // Notifications collection - Written by backend, read by admins
    match /notifications/{notificationId} {
      allow read: if isAdmin();
      allow write: if false; // Deny client-side writes
    }
  }
}
    