
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check admin role
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection (stores role information primarily for admins and system use)
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      // Creating users and assigning roles should be done securely, e.g., via a Cloud Function.
      // Admins might modify roles, but this needs careful validation of the 'role' field.
      // For now, disallow direct client-side CUD operations on user role documents to prevent unauthorized modifications.
      allow create: if false; 
      allow update: if false; 
      allow delete: if false; 
    }

    // Hairdressers collection
    match /hairdressers/{hairdresserDocId} {
      allow read: if request.auth != null; // All authenticated users can read hairdresser profiles (e.g., for booking selections)
      
      // Creation is handled by the 'createHairdresserUser' Cloud Function, which has its own admin check.
      // This rule complements it by ensuring only an admin could theoretically write directly.
      allow create: if isAdmin() &&
                      request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                      request.resource.data.email is string &&
                      request.resource.data.user_id == hairdresserDocId && // Doc ID must be user_id
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time;

      allow update: if request.auth != null && (
                      isAdmin() || // Admins can update any field
                      (
                        request.auth.uid == hairdresserDocId && // Hairdresser is updating their own profile
                        // Check immutable fields: user_id, email, createdAt cannot be changed by the hairdresser
                        request.resource.data.user_id == resource.data.user_id &&
                        request.resource.data.email == resource.data.email &&
                        request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis() &&
                        // Hairdressers can set must_reset_password from true to false (as part of reset flow), but not from false to true.
                        // Admins can change it freely (covered by isAdmin() above).
                        (
                          !('must_reset_password' in request.resource.data) || // Field not being changed
                          request.resource.data.must_reset_password == resource.data.must_reset_password || // Value isn't actually changing
                          (request.resource.data.must_reset_password == false && resource.data.must_reset_password == true) // Allowed change: true -> false
                        ) &&
                        request.resource.data.updatedAt == request.time // Ensure server timestamp for update
                      )
                    );
      allow delete: if isAdmin();
    }

    // Locations (Salons) collection
    match /locations/{locationId} {
      allow read: if request.auth != null; // All authenticated users can read salon info
      
      allow create: if isAdmin() &&
                      request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                      request.resource.data.address is string && request.resource.data.address.size() > 0 &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time;
                      
      allow update: if isAdmin() &&
                      request.resource.data.name is string && request.resource.data.name.size() > 0 &&
                      request.resource.data.address is string && request.resource.data.address.size() > 0 &&
                      request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis() && // createdAt is immutable
                      request.resource.data.updatedAt == request.time;
                      
      allow delete: if isAdmin();
    }

    // Bookings collection
    match /bookings/{bookingId} {
      allow read: if request.auth != null &&
                    (isAdmin() || request.auth.uid == resource.data.hairdresserId); // Admin or the assigned hairdresser

      allow create: if request.auth != null &&
                      // Basic data validation
                      request.resource.data.clientName is string && request.resource.data.clientName.size() > 0 &&
                      request.resource.data.clientPhone is string && request.resource.data.clientPhone.size() > 0 &&
                      request.resource.data.service is string && request.resource.data.service.size() > 0 &&
                      request.resource.data.appointmentDateTime is timestamp &&
                      request.resource.data.durationMinutes is number && request.resource.data.durationMinutes > 0 &&
                      request.resource.data.status == 'Confirmed' && // New bookings are 'Confirmed' by default from client
                      // Foreign key existence checks
                      exists(/databases/$(database)/documents/hairdressers/$(request.resource.data.hairdresserId)) &&
                      exists(/databases/$(database)/documents/locations/$(request.resource.data.salonId)) &&
                      // Timestamps
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time &&
                      // Authorization: Creator is an admin OR the hairdresser being assigned to the booking
                      (isAdmin() || request.auth.uid == request.resource.data.hairdresserId);

      allow update: if request.auth != null &&
                      // Ensure createdAt is not changed and updatedAt is set to server time
                      request.resource.data.createdAt.toMillis() == resource.data.createdAt.toMillis() &&
                      request.resource.data.updatedAt == request.time &&
                      // Ensure foreign keys still point to existing documents if they are part of the update
                      exists(/databases/$(database)/documents/hairdressers/$(request.resource.data.hairdresserId)) &&
                      exists(/databases/$(database)/documents/locations/$(request.resource.data.salonId)) &&
                      // Authorization and field-level control
                      (
                        isAdmin() || // Admins can update all validated fields
                        (
                          request.auth.uid == resource.data.hairdresserId && // Hairdresser updating their own booking
                          // Hairdressers can update: appointmentDateTime, durationMinutes, status, notes.
                          // Other fields must remain unchanged by hairdressers.
                          request.resource.data.clientName == resource.data.clientName &&
                          request.resource.data.clientEmail == resource.data.clientEmail &&
                          request.resource.data.clientPhone == resource.data.clientPhone &&
                          request.resource.data.salonId == resource.data.salonId &&
                          request.resource.data.hairdresserId == resource.data.hairdresserId && // Should be their own ID
                          request.resource.data.service == resource.data.service
                          // Fields like status, notes, appointmentDateTime, durationMinutes are allowed to change
                        )
                      );
      // Actual deletion of booking records is restricted to admins.
      // Users typically "cancel" a booking (which is an update to the status field).
      allow delete: if isAdmin();
    }
  }
}
