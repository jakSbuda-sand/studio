
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isTheUser(userId) {
      return request.auth.uid == userId;
    }

    // Global rule: Admins can do anything.
    match /{document=**} {
      allow read, write: if isAdmin();
    }

    // users, hairdressers: Read by any authenticated user, update by self.
    match /users/{userId} {
      allow get, list: if request.auth != null;
      allow update: if isTheUser(userId);
    }
    match /hairdressers/{hairdresserId} {
      allow get, list: if request.auth != null;
      allow update: if isTheUser(hairdresserId);
    }
    
    // locations, services: Public read for authenticated users.
    match /locations/{locationId} {
        allow get, list: if request.auth != null;
    }
    match /services/{serviceId} {
        allow get, list: if request.auth != null;
    }
    
    // clients: Only admins can manage (covered by global rule).
    match /clients/{clientId} {
      // No specific rules needed; falls back to global admin rule.
      // Denies access to non-admins.
    }
    
    // bookings:
    // Any authenticated user can create.
    // Any authenticated user can read (client query must enforce filtering).
    // Hairdressers can update their own bookings. Admins can update any.
    match /bookings/{bookingId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow update: if isTheUser(resource.data.hairdresserId);
    }
    
    // notifications: Admin read-only, created by backend.
    match /notifications/{notificationId} {
      // Read is covered by the global admin rule.
      allow write: if false; 
    }
  }
}
