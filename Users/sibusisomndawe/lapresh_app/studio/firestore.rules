
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin.
    // It checks the 'role' field in the user's document in the 'users' collection.
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Rules for the 'users' collection (admins).
    // Only other admins can read or write these documents.
    match /users/{userId} {
      allow read, write: if isAdmin();
    }

    // Rules for the 'hairdressers' collection.
    match /hairdressers/{hairdresserId} {
      // Any authenticated user can read hairdresser profiles (e.g., for dropdowns).
      allow read: if isAuthenticated();
      // Only admins can create new hairdresser documents.
      allow create: if isAdmin();
      // An admin can update any hairdresser's profile.
      // A hairdresser can only update their own profile.
      allow update: if isAdmin() || request.auth.uid == hairdresserId;
      // Only admins can delete hairdressers.
      allow delete: if isAdmin();
    }

    // Rules for salon locations.
    // Any authenticated user can read, but only admins can make changes.
    match /locations/{locationId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Rules for services.
    // Any authenticated user can read, but only admins can make changes.
    match /services/{serviceId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Rules for the 'clients' collection.
    match /clients/{clientId} {
      // Only admins can read the full client list or delete clients.
      allow read, delete: if isAdmin();
      // Any authenticated user can create or update a client.
      // This is required for the booking form where client details are saved.
      allow create, update: if isAuthenticated();
    }

    // Rules for the 'bookings' collection.
    match /bookings/{bookingId} {
      // Admins can read any booking.
      // Hairdressers can only read bookings assigned to them.
      allow read: if isAdmin() || request.auth.uid == resource.data.hairdresserId;
      // Any authenticated user can create a booking.
      // This allows both admins and hairdressers to use the new booking form.
      allow create: if isAuthenticated();
      // Admins can update any booking.
      // Hairdressers can only update bookings assigned to them.
      allow update: if isAdmin() || (request.auth.uid == resource.data.hairdresserId);
      // Only admins can delete bookings.
      allow delete: if isAdmin();
    }
  }
}
